---
description: 
globs: 
alwaysApply: true
---
 # CRMEB Java项目代码生成规范

## 1. 代码生成流程

### 1.1 生成前检查
1. 检查目标包是否存在
2. 检查是否存在同名类
3. 检查是否有相似功能的类
4. 确认是否需要合并或重构

### 1.2 生成过程
1. 按照包结构规范生成代码
2. 按照命名规范生成类名和方法名
3. 生成必要的注释和文档
4. 生成单元测试(可选)

### 1.3 生成后检查
1. 检查代码是否符合规范
2. 检查是否有编译错误
3. 检查是否有重复代码
4. 检查是否需要重构

## 2. 代码生成模板

### 2.1 控制器模板
```java
package com.zbkj.controller.{module};

import com.zbkj.common.response.CommonResult;
import com.zbkj.service.{module}.{ServiceName};
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@Slf4j
@RestController
@RequestMapping("/api/{module}")
@Api(tags = "{模块名称}管理")
public class {ControllerName} {

    @Autowired
    private {ServiceName} {serviceName};

    @GetMapping("/list")
    @ApiOperation(value = "获取列表")
    public CommonResult list() {
        return CommonResult.success();
    }

    @PostMapping("/add")
    @ApiOperation(value = "新增")
    public CommonResult add() {
        return CommonResult.success();
    }

    @PutMapping("/update")
    @ApiOperation(value = "修改")
    public CommonResult update() {
        return CommonResult.success();
    }

    @DeleteMapping("/delete")
    @ApiOperation(value = "删除")
    public CommonResult delete() {
        return CommonResult.success();
    }
}
```

### 2.2 服务接口模板
```java
package com.zbkj.service.{module};

public interface {ServiceName} {
    /**
     * 获取列表
     */
    Object list();

    /**
     * 新增
     */
    boolean add();

    /**
     * 修改
     */
    boolean update();

    /**
     * 删除
     */
    boolean delete();
}
```

### 2.3 服务实现模板
```java
package com.zbkj.service.{module}.impl;

import com.zbkj.service.{module}.{ServiceName};
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

@Slf4j
@Service
public class {ServiceImplName} implements {ServiceName} {

    @Override
    public Object list() {
        return null;
    }

    @Override
    public boolean add() {
        return false;
    }

    @Override
    public boolean update() {
        return false;
    }

    @Override
    public boolean delete() {
        return false;
    }
}
```

### 2.4 数据模型模板
```java
package com.zbkj.common.model.{module};

import com.baomidou.mybatisplus.annotation.IdType;
import com.baomidou.mybatisplus.annotation.TableId;
import com.baomidou.mybatisplus.annotation.TableName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import lombok.Data;

@Data
@TableName("{table_name}")
@ApiModel(value = "{模型名称}")
public class {ModelName} {

    @TableId(type = IdType.AUTO)
    @ApiModelProperty(value = "主键ID")
    private Integer id;

    @ApiModelProperty(value = "创建时间")
    private Date createTime;

    @ApiModelProperty(value = "更新时间")
    private Date updateTime;
}
```

## 3. 代码生成规则

### 3.1 包路径规则
1. 控制器类必须生成在对应的controller包下
2. 服务类必须生成在对应的service包下
3. 数据模型必须生成在common.model包下
4. 工具类必须生成在common.utils包下

### 3.2 命名规则
1. 类名必须符合命名规范
2. 方法名必须符合命名规范
3. 变量名必须符合命名规范
4. 包名必须符合命名规范

### 3.3 注释规则
1. 类必须有类注释
2. 方法必须有方法注释
3. 复杂逻辑必须有行注释
4. 注释必须使用中文

### 3.4 代码格式规则
1. 使用统一的代码格式化工具
2. 遵循阿里巴巴Java开发手册规范
3. 保持代码缩进一致性
4. 保持代码空行一致性

## 4. 特殊处理规则

### 4.1 重复类处理
1. 如果存在同名类，优先考虑合并功能
2. 如果功能不同，使用更具体的命名
3. 如果是不同模块的类，使用模块前缀区分

### 4.2 相似功能处理
1. 检查是否可以抽象为基类
2. 检查是否可以使用接口
3. 检查是否可以使用组合模式

### 4.3 代码优化处理
1. 检查是否有重复代码
2. 检查是否有冗余代码
3. 检查是否有性能问题
4. 检查是否有安全隐患

## 5. 代码生成工具

### 5.1 推荐工具
1. MyBatis-Plus代码生成器
2. IDEA代码生成插件
3. 自定义代码生成器

### 5.2 工具配置
1. 配置模板路径
2. 配置包路径
3. 配置命名规则
4. 配置代码格式

## 6. 代码审查清单

### 6.1 生成前审查
1. 检查需求是否明确
2. 检查设计是否合理
3. 检查是否有重复功能
4. 检查是否有安全隐患

### 6.2 生成后审查
1. 检查代码是否符合规范
2. 检查是否有编译错误
3. 检查是否有单元测试
4. 检查是否有文档说明